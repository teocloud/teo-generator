{%- for e in outline.enums() %}
{%- if e.members().len() > 0 %}
/// ## {{ e.title() }}
///
/// {{ e.desc }}
public enum {{ e.name() }}: String, Codable {
    {%- for m in e.members() %}

    /// ### {{ m.title() }}
    ///
    /// {{ m.desc() }}
    case {{ m.name() }} = "{{ m.name() }}"
    {%- endfor %}
}
{%- endif %}
{%- endfor %}

{%- for path_argument in outline.path_arguments() %}
@Serializable
public class {{ path_argument.name() }}: Codable {
    {%- for item in path_argument.items() %}
    public let {{ item|escape_swift }}: String
    {%- endfor %}
    public init(
    {%- for item in path_argument.items() %}
        {{ item|escape_swift }}: String{% if !loop.last %},{% endif %}
    {%- endfor %}
    ) {
    {%- for item in path_argument.items() %}
        self.{{ item }} = {{ item|escape_swift }},
    {%- endfor %}
    }
}
{%- endfor %}

{%- for interface in outline.interfaces() %}
{%- if interface.fields_optional_at_last().len() > 0 %}
{%- if interface.name().ends_with("AtomicUpdateOperationInput") %}
public enum {{ interface.name() }} : Encodable where T: Encodable {
{%- for field in interface.fields_optional_at_last() %}
    case {{ field.name()|escape_swift }}({{ lookup.call(field.type().unwrap_optional()).unwrap() }})
{%- endfor %}
    enum CodingKeys: CodingKey {
{%- for field in interface.fields_optional_at_last() %}
    case {{ field.name()|escape_swift }}
{%- endfor %}
    }
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: {{ interface.name() }}<T>.CodingKeys.self)
        switch self {
{%- for field in interface.fields_optional_at_last() %}
        case .{{ field.name()|escape_swift }}(let a0):
            try container.encode(a0, forKey: .{{ field.name() }})
{%- endfor %}
    }
}
{%- else if interface.name().ends_with("OrderByInput") %}

{%- else %}
/**
 * **{{ interface.title() }}**
 *
 * {{ interface.desc() }}
 */
@Serializable
public class {{ interface.name() }}{{ interface.generics_declaration() }} : Codable{{ where_codable(interface) }} {
{%- for field in interface.fields_optional_at_last() %}
    public let {{ field.name()|escape_swift }}: {{ lookup.call(field.type().unwrap_optional()).unwrap() }}{%- if field.type().is_optional() || interface.is_output_result() %}?{%- endif %}
{%- endfor %}
    public init(
    {%- for field in interface.fields_optional_at_last() %}
        {%- if lookup.call(field.type().unwrap_optional()).unwrap().as_str() == "AnyEncodable" %}
        {{ field.name()|escape_swift }}: Encodable{% if field.type().is_optional() || interface.is_output_result() %}? = nil{% endif %}{%- if !loop.last %},{% endif %}
        {%- else %}
        {{ field.name()|escape_swift }}: {{ lookup.call(field.type().unwrap_optional()).unwrap() }}{% if field.type().is_optional() || interface.is_output_result() %}? = nil{% endif %}{%- if !loop.last %},{% endif %}
        {%- endif %}
    {%- endfor %}
    ) {
    {%- for field in interface.fields_optional_at_last() %}
        {%- if lookup.call(field.type().unwrap_optional()).unwrap().as_str() == "AnyEncodable" %}
        self.{{ field.name() }} = AnyEncodable.from({{ field.name()|escape_swift }})
        {%- else %}
        self.{{ field.name() }} = {{ field.name()|escape_swift }}
        {%- endif %}
    {%- endfor %}
    }
}
{%- endif %}
{%- endif %}
{%- endfor %}

