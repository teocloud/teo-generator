package {{ package_name }}

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.descriptors.buildClassSerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder
import kotlinx.serialization.encoding.decodeStructure
import kotlinx.serialization.json.*
import kotlinx.serialization.modules.SerializersModule
import kotlinx.serialization.modules.plus
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.RequestBody.Companion.toRequestBody
import java.math.BigDecimal
import java.time.LocalDate
import java.time.LocalDateTime
import java.time.OffsetDateTime
import java.time.format.DateTimeFormatterBuilder


@Serializable(NullSerializer::class)
object NULL { }

@Serializer(forClass=NULL::class)
object NullSerializer : KSerializer<NULL> {
    override val descriptor: SerialDescriptor
        get() = PrimitiveSerialDescriptor("NULL", PrimitiveKind.INT)

    override fun deserialize(decoder: Decoder): NULL {
        return NULL
    }

    @OptIn(ExperimentalSerializationApi::class)
    override fun serialize(encoder: Encoder, value: NULL) {
        (encoder as JsonEncoder).encodeJsonElement(JsonPrimitive(null))
    }
}

object AnySerializer : JsonContentPolymorphicSerializer<Any>(Any::class) {
    override fun selectDeserializer(element: JsonElement) = throw NotImplementedError()
}

@Serializer(forClass=BigDecimal::class)
object BigDecimalSerializer : KSerializer<BigDecimal> {
    override val descriptor: SerialDescriptor
        get() = buildClassSerialDescriptor("BigDecimal") {
            element("\$decimal", PrimitiveSerialDescriptor("BigDecimalElement", PrimitiveKind.STRING))
        }

    override fun deserialize(decoder: Decoder): BigDecimal {
        return decoder.decodeStructure(descriptor) {
            val index = decodeElementIndex(descriptor)
            val string = decodeStringElement(descriptor, index)
            BigDecimal(string)
        }
    }

    override fun serialize(encoder: Encoder, value: BigDecimal) {
        encoder.encodeString(value.toString())
    }
}

@Serializer(forClass=LocalDate::class)
object DateSerializer : KSerializer<LocalDate> {
    override val descriptor: SerialDescriptor
        get() = buildClassSerialDescriptor("LocalDate") {
            element("\$date", PrimitiveSerialDescriptor("LocalDateElement", PrimitiveKind.STRING))
        }
    override fun deserialize(decoder: Decoder): LocalDate {
        return LocalDate.parse(decoder.decodeString())
    }

    override fun serialize(encoder: Encoder, value: LocalDate) {
        encoder.encodeString(value.toString())
    }
}

@Serializer(forClass=OffsetDateTime::class)
object DateTimeSerializer : KSerializer<OffsetDateTime> {
    private val ISO_8601_FORMATTER = DateTimeFormatterBuilder()
        .parseCaseInsensitive()
        .appendInstant(3)
        .toFormatter();

    override val descriptor: SerialDescriptor
        get() = buildClassSerialDescriptor("LocalDateTime") {
            element("\$date", PrimitiveSerialDescriptor("DateElement", PrimitiveKind.STRING))
        }

    override fun deserialize(decoder: Decoder): OffsetDateTime {
        return decoder.decodeStructure(descriptor) {
            val index = decodeElementIndex(descriptor)
            val string = decodeStringElement(descriptor, index)
            OffsetDateTime.parse(string)
        }
    }

    override fun serialize(encoder: Encoder, value: OffsetDateTime) {
        encoder.encodeString(ISO_8601_FORMATTER.format(value))
    }
}

inline fun<reified I, reified O> request(action: String, model: String, input: I, token: String? = null): O {
    val client = OkHttpClient()
    val builder = Request.Builder().url("{{ conf.host }}/$model/action/$action");
    if (token != null) {
        builder.addHeader("Authorization", "Bearer $token")
    }
    val req = builder.post(json_serializer.encodeToString(input).toRequestBody("application/json".toMediaType())).build();
    client.newCall(req).execute().use { response -> return json_serializer.decodeFromString(response.body!!.string()) }
}

@OptIn(ExperimentalSerializationApi::class)
val json_serializer = Json {
    explicitNulls = false
    serializersModule = serializersModule.plus(SerializersModule {
        contextual(BigDecimal::class, BigDecimalSerializer)
        polymorphic(Any::class, BigDecimal::class, BigDecimalSerializer)
        contextual(LocalDate::class, DateSerializer)
        polymorphic(Any::class, LocalDate::class, DateSerializer)
        contextual(OffsetDateTime::class, DateTimeSerializer)
        polymorphic(Any::class, OffsetDateTime::class, DateTimeSerializer)
    })
}

class {{ conf.object_name|capitalize_first }}(token: String? = null) {
  {%- for delegate in outline.delegates %}
  val {{ delegate.model_name|camelcase }}: {{ delegate.model_name|capitalize_first }}Delegate = {{ delegate.model_name|capitalize_first }}Delegate(token)
  {%- endfor %}
}

val {{ conf.object_name }} = {{ conf.object_name|capitalize_first }}()
